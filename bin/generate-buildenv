#!/bin/bash
# Copyright (c) 2016 TurnKey GNU/Linux - http://www.turnkeylinux.org
# 
# This file is part of buildtasks.
# 
# Buildtasks is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $(basename $0) target target-args
Print build environment related to target build type

Targets::

    iso         appname
    vm          path/to/iso.hash
    ec2         path/to/iso.hash
    xen         path/to/iso.hash
	linode      path/to/iso.hash
    docker      path/to/iso.hash
    container   path/to/iso.hash
    openstack   path/to/iso.hash

EOF
exit 1
}

BT=$(dirname $(dirname $(readlink -f $0)))
BT_CONFIG=$BT/config
. $BT/config/common.cfg

[ -z "$RELEASE" ] || CODENAME=$(basename $RELEASE)
[ -n "$CODENAME" ] || CODENAME=$(lsb_release -s -c)
[ -n "$ARCH" ] || ARCH=$(dpkg --print-architecture)

_git_state() {
    dir=$1
    cd $dir
    commit=$(git rev-parse --short HEAD)
    branch=$(git rev-parse --abbrev-ref HEAD)
    status=$(git status --porcelain | tr '\n' ' ')
    echo "$dir $commit $branch $status"
}

_common() {
    _git_state $BT
    echo "turnkey_version $(cat /etc/turnkey_version)"
    if which ec2metadata >/dev/null; then
        if ping -c1 169.254.169.254 >/dev/null; then
            echo "ami-id $(ec2metadata --ami-id)"
        else
            echo "ami-id unknown - could not connect to 169.254.169.254"
        fi
    else
        echo "ami-id unknown - ec2metadata not installed"
    fi
    echo "awscli $(python -c 'import awscli; print awscli.__version__' 2>/dev/null || echo not-installed)"
}

_optimized() {
    # get sha from hash file (supports yet-to-be signed iso hash files)
    hashpath=$1
    hash256=$(grep -A 1 -m 1 sha256sum $hashpath | tail -n 1 | sed "s/^ *//" | cut -d" " -f1)
    echo "$(basename $hashpath) $hash256"

    echo "tklpatch $(dpkg -s tklpatch | grep Version | cut -d ' ' -f 2)"
}

bt_iso() {
    appname=$1

    _git_state $FAB_PATH/common
    _git_state $FAB_PATH/cdroots
    _git_state $BT_PRODUCTS/core
    _git_state $BT_PRODUCTS/$appname
    _git_state $BT_PROFILES

    bootstrap_hash=$FAB_PATH/bootstraps/bootstrap-$CODENAME-$ARCH.tar.gz.hash
    bootstrap_hash_md5=$(md5sum $bootstrap_hash | cut -d " " -f 1)
    echo "$(basename $bootstrap_hash) $bootstrap_hash_md5"

    echo "fab $(fab --version)"
    echo "deck $(deck --version)"
}

bt_ec2() {
    echo "boto $(python -c 'import boto; print boto.__version__')"
}

bt_vm() {
    echo "ovftool $(ovftool --version)"
    echo "qemu-img $(qemu-img --version)"
}

bt_docker() {
    echo "docker $(docker --version)"
}

if [[ "$#" != "2" ]]; then
    usage
fi

target=$1
case $target in
    iso)        _common; bt_iso $2;;
    ec2)        _common; _optimized $2; bt_ec2;;
    vm)         _common; _optimized $2; bt_vm;;
    docker)     _common; _optimized $2; bt_docker;;
    container)  _common; _optimized $2;;
    openstack)  _common; _optimized $2;;
    linode)     _common; _optimized $2;;	
    xen)        _common; _optimized $2;;
    *)          fatal "unrecognized build target";;
esac

